[user]
  name = "BH Dicaire"
  email = BH@Dicaire.com

[credential]
  helper = osxkeychain

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"

[push]
  default = simple

[color]
  ui = true

[core]
  excludesfile = ~/.gitignore
  autocrlf = false
  safecrlf = true
  editor = "/usr/local/bin/atom"
	pager = diff-so-fancy | less --tabs=4 -RFX

[alias]
  # Adding
  a     = add
  aa = add --all
  ai    = add --interactive
  ap = add --patch
  au    = add --update

  # Branching
  b     = branch
  bls   = branch -v # list branches with last commit in
  branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

  # Config
  cl    = config --list

  # Checkout
  co = checkout
  co-   = checkout - # Checkout previous one

  # Commit
  # commit all using previous commit message as a template
  cia   = commit -a -e -C HEAD -v --reset-author --untracked-files=no
  ci = commit -v
  cii   = commit --interactive
  cim   = commit -m
  cip   = commit -am 'WIP!'

  # Diff
  d     = diff
  ds    = diff --staged
  du    = diff @{upstream}
  dt    = diff --stat=120,130 -M -C
  dls   = diff --name-status -M -C

  # Log
  ll    = log --pretty=ll  --abbrev-commit  # compact log
  l     = log --pretty=log
  lt    = log --pretty=log --name-status    # terse log with filenames
  ls    = log --pretty=log --stat
  lp    = log --pretty=log --patch -m -c    # show merges and compressed diff format
  lpw   = log --pretty=log --patch --word-diff
  l1    = !"git --no-pager ll -10"
  lg    = !git ll --graph
  lu    = log @{upstream}.. --stat --no-merges
  llu    = !git ll @{upstream}..

  # Push
  po    = push --set-upstream origin HEAD
  pf = push --force-with-lease

  # Pull
  pu    = pull
  pr    = pull --rebase

  # Patch
  # outputs to stdout instead of a-file-file-commit. Handy for dumping commit log into a file
  fps   = format-patch --stdout
  patch = --no-pager diff --no-color > ./changes.patch

  # Rebase
  r     = rebase
  ra    = rebase --abort
  rc    = rebase --continue
  ri    = rebase --interactive
  ru    = rebase --onto @{upstream}

  # Status
  st    = status --short --branch --untracked-files=no      # don't show untracked files
  sta   = status --short --branch --untracked-files=normal  # show all





[log]
    date = relative

[merge]
  ff = only
	tool = Kaleidoscope

[fetch]
  prune = true

[rebase]
  autosquash = true

[pretty]
  # ll=tformat:%C(bold yellow)%h%Creset %s %C(bold blue)[%an]%Creset %Cblue{%G?}%Creset %Cgreen(%cr)%Creset
  log=fuller
  ll=tformat:%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue) %an %Creset%C(red)%d%Creset
  lh=tformat:%C(red)%d%Creset %C(yellow)%h%Creset %Cgreen(%cr)%Creset %s %C(bold blue) %an %Creset

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[diff-so-fancy]
# To bypass diff-so-fancy, please use: git --no-pager diff

	markEmptyLines = true
	changeHunkIndicators = true
	stripLeadingSymbols = true
	useUnicodeRuler = true


  ; BEGIN KALEIDOSCOPE SECTION

  ; Find all commits in the given ref that aren't also in master
  ; TODO: Make this take a second optional argument
  #find-unmerged-commits = "!sh -c 'git log $1 --format='''%H''' --not master --' -"
  #find-unmerged-commits-for = "!sh -c 'git log $1 --format='''%H''' --not $2 --' -"

  ; ksdiff is the bare kaleidoscope difftool alias
  ; ksdiffid is the one that expects $KSID to be set
  #ksdiff = difftool -y -t Kaleidoscope
  #ksdiffid = difftool -y -t KaleidoscopeWithId

  ; ksdiffwith opens a diff of (current revision)->(given revision)
  #ksdiffwith = "!sh -c 'git ksdiff HEAD..$1' -"

  ; ksshow will open a single specific commit in kaleidoscope
  ; it includes the commit log info as a separate file
  #ksshow = "!sh -c 'export KSID=`uuidgen`; git log -n1 $1 > .git/LOG_MESSAGE_$KSID; ksdiff --partial-changeset --UUID $KSID -- /dev/null .git/LOG_MESSAGE_$KSID; git ksdiffid $1^..$1; ksdiff --mark-changeset-as-closed $KSID' -"

  ; ksreview takes a branch, finds all commits in that branch that aren't
  ; merged into master, and opens them one-by-one with ksshow.  It's good for
  ; reviewing pull requests.
  #ksreview = "!sh -c 'git find-unmerged-commits $1 | xargs -n1 git ksshow' -"
  #ksreviewfor = "!sh -c 'git find-unmerged-commits-for $1 $2 | xargs -n1 git ksshow' -"

  ; review takes a pull request URL and reviews it
  ; only works if you have the PR-fetching turned on and shit
  #review = "!sh -c 'git fetch upstream && git ksreviewfor `echo $1 | sed -Ee \"s_.*pull/([0-9]+)_refs/pull/upstream/\\1_\"` upstream/master' -"
  #reviewcombined = "!sh -c 'git fetch upstream && git ksdiff upstream/master `echo $1 | sed -Ee \"s_.*pull/([0-9]+)_refs/pull/upstream/\\1_\"`' -"

  #[difftool "KaleidoscopeWithId"]
  #    cmd = ksdiff --partial-changeset --UUID \"$KSID\" --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

  #[difftool "Kaleidoscope"]
  #    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

  #[difftool]
  #    prompt = false

  #[diff]
  #    tool = Kaleidoscope

#  [mergetool "Kaleidoscope"]
#      cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
#      trustExitCode = true

  ; END KALEIDOSCOPE SECTION
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustexitcode = true
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool]
	prompt = false
[diff]
	tool = Kaleidoscope
